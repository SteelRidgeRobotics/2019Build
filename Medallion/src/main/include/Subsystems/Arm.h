// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ARM_H
#define ARM_H
#include "frc/commands/Subsystem.h"
#include "frc/WPILib.h"
#include "ctre/Phoenix.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Arm: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> armMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	double height_pos;

public:
	Arm();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
	void userArm(std::shared_ptr<frc::Joystick>SystemsController);

	static constexpr double POS1 = 2050.0;

	static constexpr double POS2 = 4500.0;

	static constexpr double POS3 = 5680.0 ;

	static constexpr double MIN = 0.0; 

	static constexpr double MAX = 5685; //these three are in inches, and MIN needs to be set to 0

	static constexpr double kF = 1023.0/701.0;

	static constexpr double kP = 0.3;

	static constexpr double kIzone = 0.0;

	static constexpr double kI = 0.0;

	static constexpr double kD = 0.0;

	static const int kTimeoutMS = 30;

	static constexpr double kGearRatio = 25.0;

	static constexpr double kSensorUnitsPerRotation = 80.0;

	void encoderReset();

	void encoderDone();

	bool isMove();

	double findDistance(double rotations);

	void motionMagic(double rotations);

	void armDown();

	double getPosition();

	bool getLimitR();

	int distanceError();
	
};

#endif
