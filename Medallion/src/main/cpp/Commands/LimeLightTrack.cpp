// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/LimeLightTrack.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LimeLightTrack::LimeLightTrack(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::limelight.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void LimeLightTrack::Initialize() {
    
    std::cout << "Tracking!" << std::endl;


    Robot::limelight->setCameraMode(0);
    Robot::limelight->setLedMode(3);
    Robot::limelight->setPipeline(1);

    Robot::driveTrain->setCoast();
 
}

// Called repeatedly when this Command is scheduled to run
void LimeLightTrack::Execute() {
    double heading_error = Robot::limelight->getTx();
    double distance_error = 15.0 - Robot::limelight->getTa(); //TARGET_DISTANCE needs to be tested and changed in LimelightTrack.h
    double steering_adjust;
    double distance_adjust;
    double left_command;
    double right_command;
    double kPDistance = -1.0;
    double kPTurn = 1.0;
    

if(!Robot::limelight->getTv())
    {
        steering_adjust = 0.3;
        distance_adjust = 0.0;
           
    }

else{

steering_adjust = heading_error * kPTurn;
distance_adjust = distance_error * kPDistance;

left_command +=steering_adjust + distance_adjust;
right_command -=steering_adjust + distance_adjust;

Robot::driveTrain->setMotors(-left_command, right_command);
}

}

// Make this return true when this Command no longer needs to run execute()
bool LimeLightTrack::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void LimeLightTrack::End() {

    Robot::driveTrain->setMotors(0.0, 0.0);

    //Cancel();

    Robot::driveTrain->setBrake();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LimeLightTrack::Interrupted() {

    //Cancel();
    End();

}
