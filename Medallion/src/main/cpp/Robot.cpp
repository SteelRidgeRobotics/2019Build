// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <frc/Commands/Scheduler.h>
#include <frc/SmartDashboard/SmartDashboard.h>

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Elevator> Robot::elevator;
std::shared_ptr<Arm> Robot::arm;
std::unique_ptr<OI> Robot::oi;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

std::shared_ptr<WPI_TalonSRX> Robot::driveTrainFrontLeft;
std::shared_ptr<WPI_VictorSPX> Robot::driveTrainBackLeft;
std::shared_ptr<WPI_TalonSRX> Robot::driveTrainFrontRight;
std::shared_ptr<WPI_VictorSPX> Robot::driveTrainBackRight;

void Robot::RobotInit() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    frc::SmartDashboard::PutData(driveTrain.get());
    elevator.reset(new Elevator());
    frc::SmartDashboard::PutData(elevator.get());
    arm.reset(new Arm());
    frc::SmartDashboard::PutData(arm.get());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	chooser.AddOption("DriveWithJoystick", new DriveWithJoystick());

	chooser.SetDefaultOption("Autonomous Command", new AutonomousCommand());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);

	
   	 driveTrainBackLeft->Follow(*driveTrainFrontLeft); //left back to follow left front
     driveTrainBackRight->Follow(*driveTrainFrontRight); //right back to follow right front

     driveTrainFrontLeft->SetSensorPhase(true); //Reverse sensors
     driveTrainFrontRight->SetSensorPhase(true); //Reverse sensors

     driveTrainBackRight->SetInverted(true); //Reverse motor and slave for right side of robot.
     driveTrainFrontRight->SetInverted(true);
	 
     /*
      * Set Neutral modes to brake
      */


     driveTrainFrontLeft->SetNeutralMode(NeutralMode::Brake);
     driveTrainBackLeft->SetNeutralMode(NeutralMode::Brake);
     driveTrainFrontRight->SetNeutralMode(NeutralMode::Brake);
     driveTrainBackRight->SetNeutralMode(NeutralMode::Brake);


	
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

#ifndef RUNNING_FRC_TESTS
int main(int argc, char** argv) {
    return frc::StartRobot<Robot>();
}
#endif