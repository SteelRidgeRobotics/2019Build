// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Elevator.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/ElevatorManual.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Elevator::Elevator() : frc::Subsystem("Elevator") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevatorMotor.reset(new WPI_TalonSRX(4));
    lowLS.reset(new frc::DigitalInput(0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

     height_Pos = 0.0;
     elevatorMotor->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 10);
     elevatorMotor->SetSensorPhase(true); //NEEDS TO BE LOOKED INTO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     elevatorMotor->SetStatusFramePeriod(StatusFrameEnhanced::Status_13_Base_PIDF0, 10, 10);
     elevatorMotor->SetStatusFramePeriod(StatusFrameEnhanced::Status_10_MotionMagic, 10, 30);
     elevatorMotor->ConfigNominalOutputForward(0, 30);
     elevatorMotor->ConfigNominalOutputReverse(0, 30);
     elevatorMotor->ConfigPeakOutputForward(1, 30);
     elevatorMotor->ConfigPeakOutputReverse(-1, 30);
     elevatorMotor->SelectProfileSlot(0, 0);
     elevatorMotor->Config_kF(0, 0, 30);//these guys need to be set too!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     elevatorMotor->Config_kP(0, 0, 30);    //!
     elevatorMotor->Config_kI(0, 0, 30);    //!!
     elevatorMotor->Config_kD(0, 0, 30);    //!!! 
     elevatorMotor->ConfigMotionCruiseVelocity(0, 30); //!!!!
     elevatorMotor->ConfigMotionAcceleration(0, 30); //!!!!!
     elevatorMotor->SetSelectedSensorPosition(0, 0, 30); //look into the first value (initial sensor position)

}

void Elevator::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ElevatorManual());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Elevator::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Elevator::userElevate(std::shared_ptr<frc::Joystick>SystemsController){
    double right_y = 0.5*SystemsController->GetRawAxis(5);

    if(fabs(right_y) < 0.1){
        right_y = 0;
    }

    elevatorMotor->Set(ControlMode::PercentOutput, right_y);
}



void Elevator::encoderReset()
{

    elevatorMotor->SetSelectedSensorPosition(0, 0, 30); //NEEDS TO BE SET

    height_Pos = 0;

}

void Elevator::encoderDone()
{
    elevatorMotor->Set(ControlMode::PercentOutput, 0.0);
}

double Elevator::goToDesiredPos()
{
    double currentPosition = elevatorMotor->GetSelectedSensorPosition();

}
