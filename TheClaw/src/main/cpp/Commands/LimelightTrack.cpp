// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/LimelightTrack.h"
#include <iostream>


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

LimelightTrack::LimelightTrack(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::limelight.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    Requires(Robot::drivetrain.get());
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void LimelightTrack::Initialize() {

        std::cout << "Limelight Tracking!" << std::endl;



    Robot::limelight->setCameraMode(0);
    Robot::limelight->setLedMode(3);
    Robot::limelight->setPipeline(1);

    Robot::drivetrain->initMotors();
    Robot::drivetrain->setInvert(false, false);


}

// Called repeatedly when this Command is scheduled to run
void LimelightTrack::Execute() {

    double steering_adjust = 0.0;
    double distance_adjust = 0.0;
    double kPDistance = 0.06;
    double kPTurn = 0.05;
    

if(Robot::limelight->getTv())
    {
    double tx = Robot::limelight->getTx();
    double ty = Robot::limelight->getTy();
    double heading_error = tx;
    double distance_error = 20.0 - ty;
    
    steering_adjust = heading_error * kPTurn;
    distance_adjust = distance_error * kPDistance;
        
    }

else{
    steering_adjust = 0.85;
    distance_adjust = 0.0;
    }

Robot::drivetrain->limelightAuto(distance_adjust, steering_adjust);


}

// Make this return true when this Command no longer needs to run execute()
bool LimelightTrack::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void LimelightTrack::End() {

    Cancel();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LimelightTrack::Interrupted() {

    Robot::drivetrain->stopMotors();
    Robot::drivetrain->setInvert(false, true);
    Robot::drivetrain->initMotors();

}
