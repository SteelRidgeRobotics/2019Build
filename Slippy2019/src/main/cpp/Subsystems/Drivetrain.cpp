// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Drivetrain.h"
#include "Commands/DriveWithJoysticks.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : frc::Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft.reset(new WPI_TalonSRX(0));
    frontRight.reset(new WPI_TalonSRX(2));
    backLeft.reset(new WPI_TalonSRX(1));
    backRight.reset(new WPI_TalonSRX(3));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    leftside.reset(new frc::SpeedControllerGroup(*frontLeft, *backLeft));
    rightside.reset(new frc::SpeedControllerGroup(*frontRight, *backRight));


    backLeft->Follow(*frontLeft); //left back to follow left front
    backRight->Follow(*frontRight); //right back to follow right front

    backLeft->SetNeutralMode(NeutralMode::Brake);
    frontLeft->SetNeutralMode(NeutralMode::Brake);
    backRight->SetNeutralMode(NeutralMode::Brake);
    frontRight->SetNeutralMode(NeutralMode::Brake);

    frontRight->SetInverted(true);
    backRight->SetInverted(true);

}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    SetDefaultCommand(new DriveWithJoysticks());

}

void Drivetrain::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drivetrain::userDrive(std::shared_ptr<frc::Joystick>driveController)

{
    double left_y = -1.0*driveController->GetRawAxis(1);
    double right_y = -1.0*driveController->GetRawAxis(5);
    int l_bump = driveController->GetRawButton(5);
    
    if (fabs(left_y) < 0.1) {
        left_y = 0;
    }

    if (fabs(right_y) < 0.1 ) {
        right_y = 0;
    }

    if (l_bump == 1) {
        left_y = 0.5*left_y;
        right_y = 0.5*right_y;
    }

    frontLeft->Set(ControlMode::PercentOutput, left_y);
    frontRight->Set(ControlMode::PercentOutput, right_y);

}