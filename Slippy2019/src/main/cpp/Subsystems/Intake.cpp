// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Intake.h"

#include "Commands/IntakeManual.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Intake::Intake() : frc::Subsystem("Intake") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rightIntakeMotor.reset(new frc::VictorSP(2));
    leftIntakeMotor.reset(new frc::VictorSP(1));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Intake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new IntakeManual());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Intake::Periodic() {
    // Put code here to be run every loop

}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Intake::controlCube(std::shared_ptr<frc::Joystick>systemsController) {

	double left_trigger = systemsController->GetRawAxis(2);
	double right_trigger = systemsController->GetRawAxis(3);
	int left_bumper = systemsController->GetRawButton(5);
	int right_bumper = systemsController->GetRawButton(6);

	if(left_trigger > 0.1 && right_trigger > 0.1) {
		leftIntakeMotor->Set(0.0);
		rightIntakeMotor->Set(0.0);
	}
	else if ((left_bumper == 1 || right_bumper == 1) && right_trigger == 0) {
		leftIntakeMotor->Set(-0.6*left_trigger);
		rightIntakeMotor->Set(0.6*left_trigger);
	}
	else if ((left_bumper == 1 || right_bumper == 1) && left_trigger== 0){
		leftIntakeMotor->Set(0.6*right_trigger);
		rightIntakeMotor->Set(-0.6*right_trigger);
	}
	else if ((left_bumper == 0 || right_bumper == 0) && right_trigger == 0) {
		leftIntakeMotor->Set(-1*left_trigger);
		rightIntakeMotor->Set(left_trigger);
	}
	else if ((left_bumper == 0 || right_bumper == 0) && left_trigger== 0){
		leftIntakeMotor->Set(right_trigger);
		rightIntakeMotor->Set(-1*right_trigger);
	}

}
